package hardExercise;

public class Chain {
	Node<Integer> head, tail;
//	int size
	public Chain() {
		
	}
	
	public Chain(int start, int count, int step) {
		head = new Node<Integer>(start, null);
		Node<Integer>runner = head;
		int size = 1;
		for (int i = 1; i < count; i++) {
			runner.next = new Node<Integer>(runner.data+step, null);
			runner=runner.next;
		}
		tail = runner;
		tail.next = head;
	}
	
	public String toString() {
		String out = "";
		if (head == null)
			return out;
		Node<Integer>runner = head;
		do {
			out+=runner.data + " -> ";
			runner = runner.next;
		} while(runner != head);
		out += "Back 2 Head";
		return out;
	}
	
	public void addNode(int num, int i) {
		if (head == null) {
			head = new Node<Integer>(num, null); head.next = head; tail = head;
		}
		Node<Integer> runner = head; 
		if (i == 0) {
			tail.next = new Node<Integer>(num, head);
			head = tail.next;
		}
		
		for (i = i; i > 1; i--) {
			runner = runner.next;
		}
		Node<Integer> toAdd = new Node(num, runner.next);
		runner.next = toAdd;
		if (toAdd.next == tail)
			tail = toAdd;
	}
	
	public void cycle(int i) {
		Node runner = head;
		Node runner2 = tail;
		for (int idx = 1; idx < i; i++) {
			
		}
	}
}
