package sortLab;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import java.util.List;

public class RadixSortPanel extends JPanel {
    private JSlider speedSlider;
    private JComboBox<String> sortTypeSelector;
    private JButton loadFileButton, startButton;
    private List<Integer> numbers = new ArrayList<>();
    private int animationSpeed = 500; // Default speed in ms
    private List<List<Integer>> buckets;
    private int currentExp = 1, currentIndex = -1;
    private int currentBucket = -1;

    public RadixSortPanel() {
        setLayout(new BorderLayout());

        // Controls Panel
        JPanel controls = new JPanel();
        controls.setLayout(new FlowLayout());

        loadFileButton = new JButton("Load Numbers");
        loadFileButton.addActionListener(e -> loadNumbersFromFile());
        controls.add(loadFileButton);

        sortTypeSelector = new JComboBox<>(new String[]{"LSD Radix Sort", "MSD Radix Sort"});
        controls.add(sortTypeSelector);

        startButton = new JButton("Start Sorting");
        startButton.addActionListener(e -> startSorting());
        controls.add(startButton);

        JLabel speedLabel = new JLabel("Animation Speed:");
        controls.add(speedLabel);

        speedSlider = new JSlider(50, 1000, animationSpeed);
        speedSlider.addChangeListener(e -> animationSpeed = speedSlider.getValue());
        controls.add(speedSlider);

        add(controls, BorderLayout.NORTH);
    }

    private void loadNumbersFromFile() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (Scanner scanner = new Scanner(file)) {
                numbers.clear();
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine().trim();
                    if (!line.isEmpty()) {
                        try {
                            numbers.add(Integer.parseInt(line));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "Invalid number format: " + line);
                        }
                    }
                }
                repaint();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading file.");
            }
        }
    }

    private void startSorting() {
        String sortType = (String) sortTypeSelector.getSelectedItem();
        if (sortType != null && !numbers.isEmpty()) {
            new Thread(() -> {
                if (sortType.equals("LSD Radix Sort")) {
                    lsdRadixSort(numbers);
                } 
                JOptionPane.showMessageDialog(this, "Sorting Complete!");
            }).start();
        } else {
            JOptionPane.showMessageDialog(this, "Please load numbers and select sort type.");
        }
    }

    private void lsdRadixSort(List<Integer> numbers) {
        int max = Collections.max(numbers);
        currentExp = 1;

        while (max / currentExp > 0) {
            countSort(numbers);
            currentExp *= 10;
            repaint();
            try {
                Thread.sleep(animationSpeed);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void countSort(List<Integer> numbers) {
        buckets = new ArrayList<>();
        for (int i = 0; i < 10; i++) buckets.add(new ArrayList<>());

        for (int i = 0; i < numbers.size(); i++) {
            int digit = (numbers.get(i) / currentExp) % 10;
            buckets.get(digit).add(numbers.get(i));
            currentIndex = i;
            currentBucket = digit;
            repaint();
            try {
                Thread.sleep(animationSpeed);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        numbers.clear();
        for (List<Integer> bucket : buckets) {
            numbers.addAll(bucket);
        }

        currentIndex = -1;
        currentBucket = -1;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawNumbers(g);
        if (buckets != null) drawBuckets(g);
    }

    private void drawNumbers(Graphics g) {
        int width = getWidth() / Math.max(1, numbers.size());
        int height = 50;

        for (int i = 0; i < numbers.size(); i++) {
            g.setColor(i == currentIndex ? Color.BLUE : Color.CYAN);
            g.fillRect(i * width, getHeight() / 4 - height / 2, width - 5, height);
            g.setColor(Color.BLACK);
            g.drawString(String.valueOf(numbers.get(i)), i * width + width / 4, getHeight() / 4 + 5);
        }
    }

    private void drawBuckets(Graphics g) {
        int width = getWidth() / 10;
        int height = 50;

        for (int i = 0; i < buckets.size(); i++) {
            List<Integer> bucket = buckets.get(i);
            for (int j = 0; j < bucket.size(); j++) {
                g.setColor(i == currentBucket ? Color.BLUE : Color.CYAN);
                g.fillRect(i * width, getHeight() / 2 + j * height, width - 5, height);
                g.setColor(Color.BLACK);
                g.drawString(String.valueOf(bucket.get(j)), i * width + width / 4, getHeight() / 2 + j * height + 25);
            }
        }
    }
}
