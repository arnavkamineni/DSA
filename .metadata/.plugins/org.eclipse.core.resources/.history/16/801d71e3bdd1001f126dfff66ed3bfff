package dp;

import java.util.ArrayList;
import java.util.HashMap;

public class DP {
	
	public static void main(String[] args) {
		System.out.println(prime(100000));
	}
	
	public static long prime(int n) {
		ArrayList<Long> memo = new ArrayList<Long>();
		memo.add((long) 2);
		
		return primeH(n, memo);
	}
	
	private static long primeH(int n, ArrayList<Long> memo) {
		if (n < memo.size() ) {
			return memo.get(n);
		}
		long num = memo.get(memo.size() - 1) + 1;
		
		while ( n >= memo.size()) {
			boolean isPrime = true;;
			for (Long prime : memo) {
				double sqrtNum = Math.sqrt(num);
				if (prime > sqrtNum) {
					break;
				}
				if (num % prime == 0) {
					isPrime = false;
				}
				
				
			}
			if (isPrime) {
				memo.add(num);
			}
			num++;
		}
		return memo.get(n - 1);
	}
	
	public static int longestCollatz(int n) {
		int max_num = Integer.MIN_VALUE;
		HashMap<Integer, Integer> memo = new HashMap<Integer, Integer>();
		
		for( int i = 0; i < n; i++ ) {
			max_num = Math.max(max_num, LCH(i, memo));
		}
		return max_num;
	}
	
	private static int LCH(int n, HashMap<Integer, Integer> memo) {
		if (memo.containsKey(n)) {
			return memo.get(n);
		} else {
			if (n % 2 == 0) {
				int new_n = n/2;
				memo.put(n, LCH(new_n, memo)); 
			}
		}
	}
}
