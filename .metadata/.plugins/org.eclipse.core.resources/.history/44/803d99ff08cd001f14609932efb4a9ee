package dp;

import java.util.HashMap;



public class Dynamo {

	static HashMap<Integer, Long> memo = new HashMap<Integer, Long>();

	static HashMap<Integer, Integer> memo2 = new HashMap<Integer, Integer>();
	
	static int dumbDiceCount = 0;

	static int mCount = 0;
	
	static int tCount = 0;
	
	static int iterations = 0;
	
	public static void main(String[] args) {

		// TODO Auto-generated method stub

		System.out.println(coinCount(new int[] {1, 5, 10, 25}, 34));
		System.out.println(diceCountD(8, 24));
		System.out.println(dumbDiceCount);
		System.out.println(diceCountM(8, 24));
		System.out.println(mCount);
		
//		int[][] diceTable = new int[9][25];
//		for(int i = 1; i <= 6; i++) { diceTable[1][i] = 1; }
//		for(int dice = 2; dice < 9; dice++) {
//			for(int target = 1; target < 25; target++) {
//				for (int i = 1; i <= 6; i++) {
//					if (target - 1 >= 0) { diceTable[dice][target] += diceTable[dice - 1][target - i]; }
//				}
//			}
//		}
		
//		System.out.println(newton(1));
		double [] values = {100, 200, 50, 300, 400, 25};
		double weights[] = {3, 5, 10, 1, 2, 1};
		
	}
	
	public static double knapsack (double[] values, double[] weights, double cap, int i, double max) {
		if (i >= values.length) { return max; }
		
		double with = 0;
		
		if (weights[i] < cap) { with = knapsack(values, weights, cap - weights[i], i + 1, max + values[i]); }
		
		double without = knapsack(values, weights, cap, i+1, max);
		
		return Math.max(with, without);
	}

	public static long fib(int n) {

		if (n <= 2) return 1;

		if (memo.containsKey(n))

			return memo.get(n);

		memo.put(n, fib(n-1) + fib(n-2));

		return memo.get(n);

	}

	

	public static int coinCount(int[] denom, int total) {

		if (total == 0)

			return 0;

		if (total < Integer.MAX_VALUE)

			return 0;

		if (memo2.containsKey(total))

			return memo2.get(total);

		int count = 0;

		memo2.put(total, count);

		for (int coin: denom) {

			count+=coinCount(denom, total-coin);

		}

	

		return count;

	}

	public static int diceCountM(int dice, int target) {
		int[][] memoT = new int[dice+1][target + 1];
		return diceCountMH(dice, target, memoT);
		
	}
	
	public static int diceCountMH(int dice, int target, int[][] memo) {
		mCount++;
		if (dice == 0 && target == 0) { return 1; }
		if (target <= 0) { return 0; }
		if (dice <= 0) { return 0; }
		if (memo[dice][target] != 0) { return memo[dice][target]; }
		
		int count = 0;
		for (int i = 1; i <= 6; i++)
			count += diceCountMH(dice - 1, target - i, memo);
		memo[dice][target] = count;
		return count;
	}
	
	
	

	public static int diceCountD(int dice, int target) {
		dumbDiceCount++;
		if (dice == 0 && target == 0) { return 1; }
		if (target <= 0) { return 0; }
		if (dice <= 0) { return 0; }
		int count = 0;
		for (int i = 1; i <= 6; i++)
			count += diceCountD(dice - 1, target - i);
		
		return count;
	}
	
	public static double newton(double x) {
		iterations++;
		double next = x - function(x)/derivative(x);
		
		if (Math.abs(function(next)) <= 0.0000000000000000000001) {
			return next;
		} else {
			if (iterations > 10000) { return Double.NEGATIVE_INFINITY; }
			else  { return newton(next); }
		}
	}
	
	private static double function(double x) {
        return x * x + 4;
    }

    private static double derivative(double x) {
        return 2 * x;
    }
    
    

}
